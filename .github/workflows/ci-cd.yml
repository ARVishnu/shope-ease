name: Deploy React App to AWS EC2

on:
  push:
    branches:
      - main # This workflow runs when you push to the `main` branch

jobs:
  deploy:
    runs-on: ubuntu-latest # Runs on the latest Ubuntu virtual machine

    steps:
      # Step 1: Checkout code from GitHub
      - name: Checkout code
        uses: actions/checkout@v3 # Fetches the code from GitHub repository

      # Step 2: Set up Node.js (required for React)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18" # Set the Node.js version to use

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install # This will install all the required dependencies (e.g., react-scripts)

      # Step 4: Build the React app
      - name: Build React app
        run: npm run build # This creates the optimized production build in the `build/` folder

      # Step 5: Deploy the app to EC2 using SSH
      - name: Deploy to EC2
        run: |
          # Write the private SSH key from GitHub Secrets to a file
          echo "${{ secrets.AWS_SSH_KEY }}" > aws_ssh_key.pem
          chmod 600 aws_ssh_key.pem  # Set proper file permissions for the private key

          # SSH into the EC2 instance and deploy the React app
          ssh -i aws_ssh_key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_IP }} << 'EOF'
            # Check if the project directory exists. If not, clone the repository.
            if [ ! -d "/var/www/my-react-app/.git" ]; then
              # Clone the repository if it doesn't exist
              cd /var/www
              git clone https://github.com/<your-github-username>/<your-repo-name>.git my-react-app
            else
              # If the repo already exists, pull the latest changes
              cd /var/www/my-react-app
              git pull origin main
            fi

            # Install dependencies (if there are any new dependencies)
            npm install

            # Build the React app for production
            npm run build

            # Restart Nginx (or your web server) to serve the new app
            sudo systemctl restart nginx
          EOF
